{"id": 1, "title": "Race Condition within a Thread", "overview": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.", "remediation": "::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Create resource-locking sanity checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.::", "damage": 1, "reproducability": 1, "exploitability": 1, "affected_users": 1, "discoverability": 1, "dread_total": 1, "effort": null, "type": "Imported", "poc": null, "approved": true, "risk": 1, "affected_hosts": null, "av": null, "ac": null, "au": null, "c": null, "i": null, "a": null, "e": null, "rl": null, "rc": null, "cdp": null, "td": null, "cr": null, "ir": null, "ar": null, "cvss_base": null, "cvss_impact": null, "cvss_exploitability": null, "cvss_temporal": null, "cvss_environmental": null, "cvss_modified_impact": null, "cvss_total": null, "ease": null}
