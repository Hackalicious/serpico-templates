{"id": 1, "title": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context", "overview": "The use of a singleton pattern may not be thread-safe.", "remediation": "::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use the Thread-Specific Storage Pattern. See References.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.::PHASE:Implementation:STRATEGY::EFFECTIVENESS:Limited:DESCRIPTION:Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).::", "damage": 1, "reproducability": 1, "exploitability": 1, "affected_users": 1, "discoverability": 1, "dread_total": 1, "effort": null, "type": "Imported", "poc": null, "approved": true, "risk": 1, "affected_hosts": null, "av": null, "ac": null, "au": null, "c": null, "i": null, "a": null, "e": null, "rl": null, "rc": null, "cdp": null, "td": null, "cr": null, "ir": null, "ar": null, "cvss_base": null, "cvss_impact": null, "cvss_exploitability": null, "cvss_temporal": null, "cvss_environmental": null, "cvss_modified_impact": null, "cvss_total": null, "ease": null}
