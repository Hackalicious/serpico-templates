{"id": 1, "title": "Heap-based Buffer Overflow", "overview": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().", "remediation": "::PHASE::STRATEGY::EFFECTIVENESS::DESCRIPTION:Pre-design: Use a language or compiler that performs automatic bounds checking.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use an abstraction library to abstract away risky APIs. Not a complete solution.::PHASE:Build and Compilation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Pre-design through Build: Canary style bounds checking, library changes which ensure the validity of chunk data, and other such fixes are possible, but should not be relied upon.::PHASE:Implementation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Implement and perform bounds checking on input.::PHASE:Implementation:STRATEGY:Libraries or Frameworks:EFFECTIVENESS::DESCRIPTION:Do not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.::PHASE:Operation:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth.::", "damage": 1, "reproducability": 1, "exploitability": 1, "affected_users": 1, "discoverability": 1, "dread_total": 1, "effort": null, "type": "Imported", "poc": null, "approved": true, "risk": 1, "affected_hosts": null, "av": null, "ac": null, "au": null, "c": null, "i": null, "a": null, "e": null, "rl": null, "rc": null, "cdp": null, "td": null, "cr": null, "ir": null, "ar": null, "cvss_base": null, "cvss_impact": null, "cvss_exploitability": null, "cvss_temporal": null, "cvss_environmental": null, "cvss_modified_impact": null, "cvss_total": null, "ease": null}
