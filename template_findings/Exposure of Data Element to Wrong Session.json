{"id": 1, "title": "Exposure of Data Element to Wrong Session", "overview": "Data can bleed from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool. In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user&amp;#x27;s data. In other words, storing user data in Servlet member fields introduces a data access race condition.", "remediation": "::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Protect the application&amp;#x27;s sessions from information leakage. Make sure that a session&amp;#x27;s data is not used or visible by other sessions.::PHASE:Testing:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.::", "damage": 1, "reproducability": 1, "exploitability": 1, "affected_users": 1, "discoverability": 1, "dread_total": 1, "effort": null, "type": "Imported", "poc": null, "approved": true, "risk": 1, "affected_hosts": null, "av": null, "ac": null, "au": null, "c": null, "i": null, "a": null, "e": null, "rl": null, "rc": null, "cdp": null, "td": null, "cr": null, "ir": null, "ar": null, "cvss_base": null, "cvss_impact": null, "cvss_exploitability": null, "cvss_temporal": null, "cvss_environmental": null, "cvss_modified_impact": null, "cvss_total": null, "ease": null}
